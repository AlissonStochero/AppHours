// <auto-generated />
using System;
using App.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Collaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("companyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("companyId");

                    b.ToTable("Collaborators");
                });

            modelBuilder.Entity("App.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CNPJ")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("App.Domain.Entities.Collaborator", b =>
                {
                    b.HasOne("App.Domain.Entities.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("App.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CollaboratorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("CollaboratorId");

                            b1.ToTable("Collaborators");

                            b1.WithOwner()
                                .HasForeignKey("CollaboratorId");
                        });

                    b.OwnsOne("App.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CollaboratorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("CollaboratorId");

                            b1.ToTable("Collaborators");

                            b1.WithOwner()
                                .HasForeignKey("CollaboratorId");
                        });

                    b.OwnsOne("App.Domain.ValueObjects.Password", "KeyPassword", b1 =>
                        {
                            b1.Property<Guid>("CollaboratorId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Key");

                            b1.HasKey("CollaboratorId");

                            b1.ToTable("Collaborators");

                            b1.WithOwner()
                                .HasForeignKey("CollaboratorId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("KeyPassword")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("company");
                });

            modelBuilder.Entity("App.Domain.Entities.Company", b =>
                {
                    b.OwnsOne("App.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("Name");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
